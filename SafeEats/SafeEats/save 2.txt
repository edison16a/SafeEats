//
//  ContentView.swift
//  SafeEats
//
//  Created by Edison Law on 11/13/24.
//

import SwiftUI
import SwiftData
import Vision
import AVFoundation
import Combine


struct ContentView: View {
    @Environment(\.modelContext) private var modelContext
    @Query private var items: [Item]
    @AppStorage("hasSeenOnboarding") private var hasSeenOnboarding = false
    @State private var selectedTab: Tab = .scan
    @AppStorage("selectedAllergens") private var selectedAllergensData: Data = Data() // Persisted allergen selections
    @State private var countdown: Double = 3.0
    @State private var timerSubscription: Cancellable? = nil
    @State private var isCountdownSettingsPresented = false
    @State private var setCount: Double = 3.0
    
    enum Tab {
        case scan, allergens
    }
    
    // Sample allergens list
    @State private var allergens: [Allergen] = [
        Allergen(id: "peanut", name: "Peanut", isEnabled: false),
        Allergen(id: "dairy", name: "Dairy", isEnabled: false),
        Allergen(id: "gluten", name: "Gluten", isEnabled: false),
        Allergen(id: "egg", name: "Egg", isEnabled: false),
        Allergen(id: "fish", name: "Fish", isEnabled: false),
        Allergen(id: "shellfish", name: "Shellfish", isEnabled: false),
        Allergen(id: "meat", name: "Meat", isEnabled: false),
        Allergen(id: "soy", name: "Soy", isEnabled: false),
        Allergen(id: "wheat", name: "Wheat", isEnabled: false),
        Allergen(id: "sesame", name: "Sesame", isEnabled: false),
        Allergen(id: "treeNut", name: "Tree Nut", isEnabled: false),
        Allergen(id: "corn", name: "Corn", isEnabled: false),
        Allergen(id: "mustard", name: "Mustard", isEnabled: false),
        Allergen(id: "celery", name: "Celery", isEnabled: false),
        Allergen(id: "lupin", name: "Lupin", isEnabled: false),
        Allergen(id: "sulfite", name: "Sulfite", isEnabled: false),
        Allergen(id: "peach", name: "Peach", isEnabled: false),
        Allergen(id: "plum", name: "Plum", isEnabled: false),
        Allergen(id: "apricot", name: "Apricot", isEnabled: false),
        Allergen(id: "tomato", name: "Tomato", isEnabled: false),
        Allergen(id: "cherry", name: "Cherry", isEnabled: false),
        Allergen(id: "kiwi", name: "Kiwi", isEnabled: false),
        Allergen(id: "banana", name: "Banana", isEnabled: false)
    ]
    
    private let keyWords: [String: [String]] = [
removed for gpt
    ]
    
    @State private var detectedAllergens: [Allergen] = []
    
    // Function to save allergen states to AppStorage
    private func saveAllergens() {
        if let encoded = try? JSONEncoder().encode(allergens) {
            selectedAllergensData = encoded
        }
    }

    var body: some View {
        if hasSeenOnboarding {
            VStack {
                // Main content area based on the selected tab
                NavigationView {
                    VStack {
                        if selectedTab == .scan {

                            VStack {
                                Text("Scan")
                                    .font(.title)
                                    .foregroundColor(.white)
                               
                                
                                Text("Point and hold at Food Label")
                                    .font(.subheadline)
                                    .foregroundColor(.white)
               
                                CameraCaptureView(onTextDetected: handleTextDetection)
                                    .onAppear {
                                        countdown = setCount // Reset countdown to 5 seconds
                                    }
                                
                                // Display detected allergens
                                ScrollView {
                                    VStack(spacing: 10) {
                                        Text("Allergens Detected By Scan")
                                            .foregroundColor(.white)
                                            .font(.headline)
                                        
                                        Text("Next scan in \(String(format: "%.1f", countdown)) seconds")
                                            .font(.subheadline)
                                            .foregroundColor(.white)
                                        
                                        // Create a 3-column grid layout
                                        let columns = Array(repeating: GridItem(.flexible(), spacing: 10), count: 3)
                                        
                                        LazyVGrid(columns: columns, spacing: 10) {
                                            ForEach(detectedAllergens, id: \.id) { allergen in
                                                let allergenIsEnabled = allergens.first(where: { $0.id == allergen.id })?.isEnabled ?? false
                                                
                                                VStack {
                                          
                                                        Image(allergen.id)
                                                            .resizable()
                                                            .scaledToFit()
                                                            .frame(width: 30, height: 30)  // Adjust size as needed
                                                        Text(allergen.name)
                                                            .font(.caption)
                                                            .foregroundColor(.white)
                                                            .multilineTextAlignment(.center)
                                                    
                                                }
                                                .padding()
                                                .frame(maxWidth: .infinity)
                                                .background(allergenIsEnabled ? Color.red : Color.green)
                                                .cornerRadius(8)
                                            }
                                        }
                                        .padding(.horizontal)
                                    }
                                }
                                .padding()
                                .onAppear {
                                    if let decoded = try? JSONDecoder().decode([Allergen].self, from: selectedAllergensData) {
                                        allergens = decoded
                                    }
                                    countdown = setCount
                                    startCountdown()
                                }
                                
                                
                                
                            }
                            


                        } else if selectedTab == .allergens {
                            // Allergens tab content
                            Text("Allergens")
                                .font(.title)
                                .foregroundColor(.white)
                                .padding()

                            ScrollView {
                                VStack {
                                    ForEach(allergens) { allergen in
                                        HStack {
                                            Image(allergen.id) // Using allergen ID as system icon
                                                .resizable()
                                                .scaledToFit()
                                                .frame(width: 40, height: 40)
                                            Text(allergen.name)
                                                .font(.body)
                                                .foregroundColor(.white)
                                            Spacer()
                                            Toggle("", isOn: Binding(
                                                get: { allergen.isEnabled },
                                                set: { newValue in
                                                    if let index = allergens.firstIndex(where: { $0.id == allergen.id }) {
                                                        allergens[index].isEnabled = newValue
                                                        saveAllergens() // Save after toggle change
                                                    }
                                                }
                                            ))
                                            .labelsHidden()
                                            .toggleStyle(SwitchToggleStyle(tint: .blue))
                                        }
                                        .padding()
                                        .background(Color(.darkGray))
                                        .cornerRadius(5)
                                    }
                                }
                            }
                            .background(Color.black)
                            .onAppear {
                                if let decoded = try? JSONDecoder().decode([Allergen].self, from: selectedAllergensData) {
                                    allergens = decoded
                                }
                            }
                        }
                    }
                    .frame(maxWidth: .infinity)
                    .frame(maxHeight: .infinity)
                    .padding()
                    .background(Color.black)
                    .ignoresSafeArea(edges: .bottom)
                }
                
                // Custom tab bar at the bottom
                HStack {
                    TabBarItem(
                        title: "Scan",
                        iconName: selectedTab == .scan ? "camera.fill" : "camera",
                        isSelected: selectedTab == .scan
                    ) {
                        selectedTab = .scan
                    }
                    
                    Spacer().frame(width: 80) // Adjusted space between items
                    
                    TabBarItem(
                        title: "Allergens",
                        iconName: selectedTab == .allergens ? "exclamationmark.shield.fill" : "exclamationmark.shield",
                        isSelected: selectedTab == .allergens
                    ) {
                        selectedTab = .allergens
                    }
                }
                .frame(maxWidth: .infinity)
                .frame(height: 60)
                .ignoresSafeArea(edges: .bottom)
                .ignoresSafeArea(edges: .top)
                .background(Color(.darkGray))
                .ignoresSafeArea(edges: .bottom)
                .ignoresSafeArea(edges: .top)
            }
        } else {
            OnboardingView(hasSeenOnboarding: $hasSeenOnboarding)
                .background(Color(hex: "#94b9ff").ignoresSafeArea())
        }
        // Step 3: Decode allergen data when the view appears

    }
    
    private func handleTextDetection(scannedText: String) {
        detectedAllergens = allergens.filter { allergen in
            if let keywords = keyWords[allergen.id] {
                return keywords.contains { scannedText.lowercased().contains($0) }
            }
            return false
        }
    }
    
    private func startCountdown() {
        timerSubscription = Timer.publish(every: 0.1, on: .main, in: .common)
            .autoconnect()
            .sink { _ in
                if countdown > 0 {
                    countdown -= 0.1
                } else {
                    countdown = setCount // Reset countdown

                }
            }
    }


}



struct Allergen: Identifiable, Codable, Equatable {
    var id: String
    var name: String
    var isEnabled: Bool
    var showForThreeSeconds: Bool = false
}



struct CameraCaptureView: UIViewControllerRepresentable {
    var onTextDetected: (String) -> Void
    

    func makeCoordinator() -> Coordinator {
        return Coordinator(onTextDetected: onTextDetected)
    }

    func makeUIViewController(context: Context) -> CameraCaptureViewController {
        let controller = CameraCaptureViewController()
        controller.delegate = context.coordinator
        return controller
    }

    func updateUIViewController(_ uiViewController: CameraCaptureViewController, context: Context) {}

    class Coordinator: NSObject, AVCaptureVideoDataOutputSampleBufferDelegate {
        var onTextDetected: (String) -> Void
        private var request = VNRecognizeTextRequest()
        private var scanTimer: Timer?
        private var isScanningAllowed = true

        init(onTextDetected: @escaping (String) -> Void) {
            self.onTextDetected = onTextDetected
            super.init()
            setupTextRecognition()
            startScanTimer() // Start the timer when the Coordinator initializes
        }

        private func setupTextRecognition() {
            request = VNRecognizeTextRequest { [weak self] request, error in
                guard let observations = request.results as? [VNRecognizedTextObservation] else { return }
                let recognizedText = observations.compactMap { $0.topCandidates(1).first?.string }.joined(separator: " ")
                DispatchQueue.main.async {
                    self?.onTextDetected(recognizedText)
                }
            }
            request.recognitionLevel = .accurate
        }
        
        // Function to handle the timer delay
        private func startScanTimer() {
            scanTimer = Timer.scheduledTimer(withTimeInterval: 3.0, repeats: true) { [weak self] _ in
                self?.isScanningAllowed = true
            }
        }

        func captureOutput(_ output: AVCaptureOutput, didOutput sampleBuffer: CMSampleBuffer, from connection: AVCaptureConnection) {
            guard isScanningAllowed else { return }  // Skip if scanning isn't allowed yet
            guard let pixelBuffer = CMSampleBufferGetImageBuffer(sampleBuffer) else { return }

            let handler = VNImageRequestHandler(cvPixelBuffer: pixelBuffer, orientation: .up, options: [:])
            do {
                try handler.perform([request])
                isScanningAllowed = false // Reset scanning permission after each scan
            } catch {
                print("Text recognition error: \(error)")
            }
        }
        
        deinit {
            scanTimer?.invalidate()
        }
    }
}

class CameraCaptureViewController: UIViewController {
    var delegate: AVCaptureVideoDataOutputSampleBufferDelegate?
    private let captureSession = AVCaptureSession()
    private var previewLayer: AVCaptureVideoPreviewLayer?

    override func viewDidLoad() {
        super.viewDidLoad()
        setupCamera()
    }

    private func setupCamera() {
        guard let videoCaptureDevice = AVCaptureDevice.default(for: .video) else { return }
        let videoInput: AVCaptureDeviceInput
        do {
            videoInput = try AVCaptureDeviceInput(device: videoCaptureDevice)
        } catch {
            print("Cannot access camera")
            return
        }

        if captureSession.canAddInput(videoInput) {
            captureSession.addInput(videoInput)
        }

        let videoOutput = AVCaptureVideoDataOutput()
        videoOutput.setSampleBufferDelegate(delegate, queue: DispatchQueue.global(qos: .userInteractive))

        if captureSession.canAddOutput(videoOutput) {
            captureSession.addOutput(videoOutput)
        }

        let previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
        previewLayer.videoGravity = .resizeAspectFill

        view.layer.addSublayer(previewLayer)
        self.previewLayer = previewLayer
        
        // Adjust the previewLayer frame to top half and center it
        let screenBounds = view.bounds
        previewLayer.frame = CGRect(
            x: 0,
            y: 0,
            width: screenBounds.width,
            height: screenBounds.height / 2
        )
        
        captureSession.startRunning()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        if let previewLayer = previewLayer {
            let screenBounds = view.bounds
            previewLayer.frame = CGRect(
                x: 0,
                y: 0,
                width: screenBounds.width,
                height: screenBounds.height
            )
        }
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        captureSession.stopRunning()
    }
}

// Rest Removed for gpt
#Preview {
    ContentView()
        .modelContainer(for: Item.self, inMemory: true)
}
